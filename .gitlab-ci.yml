workflow:
  rules: 
    - if: $CI_COMMIT_BRANCH != "main" && $CI_PIPELINE_SOURCE != "merge_request_event"
      when: never
    - when: always
    # - when: never
image: alpine:3.15.1
stages:
  # - test
  - build
  - deploy

variables:
  # IMAGE_NAME: $CI_REGISTRY_IMAGE/microservice/$MICRO_SERVICE
  # IMAGE_TAG: "1.0"
  DEV_SERVER_HOST: "ec2-44-200-125-244.compute-1.amazonaws.com"
  DEV_ENDPOINT: "http://ec2-44-200-125-244.compute-1.amazonaws.com:3000"
# run_unit_tests:
#   image: node:16.13.0
#   tags:
#     - "local"
#     - "macos"
#   stage: test
#   before_script:
#     - ls
#     - yarn
#   script:
#     - yarn test:all
#   after_script:
#     - yarn merge-reports
#   artifacts:
#     when: always
#     reports:
#       junit: junit.xml

build_offers:
  stage: build
  tags:
    - "local"
    - "macos"
  before_script:
    - export IMAGE_NAME=$CI_REGISTRY_IMAGE/microservice/offers
    - export IMAGE_TAG=1.0
  script: 
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build --build-arg APP_NAME=offers -t $IMAGE_NAME:$IMAGE_TAG .
    - docker push $IMAGE_NAME:$IMAGE_TAG 

build_contracts:
  stage: build
  tags:
    - "local"
    - "macos"
  before_script:
    - export IMAGE_NAME=$CI_REGISTRY_IMAGE/microservice/contracts
    - export IMAGE_TAG=1.0
  script: 
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build --build-arg APP_NAME=contracts -t $IMAGE_NAME:$IMAGE_TAG .
    - docker push $IMAGE_NAME:$IMAGE_TAG 

build_gateway:
  stage: build
  tags:
    - "local"
    - "macos"
  before_script:
    - export IMAGE_NAME=$CI_REGISTRY_IMAGE/microservice/gateway
    - export IMAGE_TAG=1.0
  script: 
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build --build-arg APP_NAME=gateway -t $IMAGE_NAME:$IMAGE_TAG .
    - docker push $IMAGE_NAME:$IMAGE_TAG 

build_frontend:
  stage: build
  tags:
    - "local"
    - "macos"
  before_script:
    - export IMAGE_NAME=$CI_REGISTRY_IMAGE/microservice/frontend
    - export IMAGE_TAG=1.0
  script: 
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build --build-arg APP_NAME=frontend -t $IMAGE_NAME:$IMAGE_TAG .
    - docker push $IMAGE_NAME:$IMAGE_TAG 




# push_offers: 
#   stage: build
#   needs:
#     - build_offers
#   tags:
#     - "local"
#     - "macos"
#   before_script:
#     - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
#   script:
#     - docker push $IMAGE_NAME:$IMAGE_TAG


# deploy_to_dev: 
#   stage: deploy
#   tags: 
#     - "local"
#     - "macos"
#   before_script:
#     - chmod 400 $SSH_PRIVATE_KEY
#   script:
#     - scp -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY ./docker-compose.yaml ubuntu@$DEV_SERVER_HOST:/home/ubuntu/
#     - ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY  ubuntu@$DEV_SERVER_HOST "
#       docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY &&
#       export DC_IMAGE_NAME=$IMAGE_NAME && 
#       export DC_IMAGE_TAG=$IMAGE_TAG && 
#       docker-compose down &&
#       docker-compose up -d"
#   environment:
#     name: development
#     url: $DEV_ENDPOINT


