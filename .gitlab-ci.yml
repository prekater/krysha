workflow:
  rules:
    - if: $CI_COMMIT_BRANCH != "main" && $CI_PIPELINE_SOURCE != "merge_request_event"
      when: never
    - when: always
    # - when: never
variables:
  # IPv4 Public IP
  DEPLOYMENT_SERVER_HOST: "44.200.125.244"
  # Public DNS
  APP_ENDPOINT: "ec2-44-200-125-244.compute-1.amazonaws.com"

image: alpine:3.15.1
stages:
  # - test
  - build
  - deploy
.build:
  stage: build
  tags:
    - "local"
    - "macos"
  variables:
    MICRO_SERVICE: ""
    SERVICE_VERSION: ""
  before_script:
    - export IMAGE_NAME=$CI_REGISTRY_IMAGE/microservice/$MICRO_SERVICE
    - export IMAGE_TAG=$SERVICE_VERSION
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $IMAGE_NAME:$IMAGE_TAG .
    - docker push $IMAGE_NAME:$IMAGE_TAG

.deploy:
  stage: deploy
  tags:
    - "local"
    - "macos"

  before_script:
    - chmod 400 $SSH_PRIVATE_KEY
    - export IMAGE_NAME=$CI_REGISTRY_IMAGE/microservice/monorepo
    - export IMAGE_TAG=1.0
  script:
    - scp -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY ./docker-compose.yml ubuntu@$APP_ENDPOINT:/home/ubuntu
    - ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY ubuntu@$APP_ENDPOINT "
      docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY &&

      export DC_IMAGE_NAME=monorepo &&
      export DC_IMAGE_TAG=$IMAGE_TAG &&
      export DC_APP_PORT=$APP_PORT &&
      export DC_MONGO_URL=$MONGO_URL &&

      docker network create micro_service || true &&

      docker-compose down &&
      docker image remove registry.gitlab.com/alexanderkir1994/contracts-svc/microservice/monorepo:1.0 --force &&
      docker-compose up -d"
  environment:
    name: development
    url: $APP_ENDPOINT

# run_unit_tests:
#   image: node:16.13.0
#   tags:
#     - "local"
#     - "macos"
#   stage: test
#   before_script:
#     - ls
#     - yarn
#   script:
#     - yarn test:all
#   after_script:
#     - yarn merge-reports
#   artifacts:
#     when: always
#     reports:
#       junit: junit.xml


build_monorepo:
  extends: .build
  variables:
    MICRO_SERVICE: "monorepo"
    SERVICE_VERSION: "1.0"


deploy_gateway:
  extends: .deploy
  variables:
    APP_NAME: "gateway"


# build_offers:
#   stage: build
#   tags:
#     - "local"
#     - "macos"
#   before_script:
#     - export IMAGE_NAME=$CI_REGISTRY_IMAGE/microservice/offers
#     - export IMAGE_TAG=1.0
#   script:
#     - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
#     - docker build --build-arg APP_NAME=offers -t $IMAGE_NAME:$IMAGE_TAG .
#     - docker push $IMAGE_NAME:$IMAGE_TAG
#   only:
#     changes:
#       - "apps/offers/**/*"
#       - "libs/**/*"
# build_contracts:
#   stage: build
#   tags:
#     - "local"
#     - "macos"
#   before_script:
#     - export IMAGE_NAME=$CI_REGISTRY_IMAGE/microservice/contracts
#     - export IMAGE_TAG=1.0
#   script:
#     - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
#     - docker build --build-arg APP_NAME=contracts -t $IMAGE_NAME:$IMAGE_TAG .
#     - docker push $IMAGE_NAME:$IMAGE_TAG

# build_gateway:
#   stage: build
#   tags:
#     - "local"
#     - "macos"
#   before_script:
#     - export IMAGE_NAME=$CI_REGISTRY_IMAGE/microservice/gateway
#     - export IMAGE_TAG=1.0
#   script:
#     - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
#     - docker build --build-arg APP_NAME=gateway -t $IMAGE_NAME:$IMAGE_TAG .
#     - docker push $IMAGE_NAME:$IMAGE_TAG

# build_frontend:
#   stage: build
#   tags:
#     - "local"
#     - "macos"
#   before_script:
#     - export IMAGE_NAME=$CI_REGISTRY_IMAGE/microservice/frontend
#     - export IMAGE_TAG=1.0
#   script:
#     - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
#     - docker build --build-arg APP_NAME=frontend -t $IMAGE_NAME:$IMAGE_TAG .
#     - docker push $IMAGE_NAME:$IMAGE_TAG



